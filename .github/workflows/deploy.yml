name: Docker CI

on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          docker build -t $DOCKER_USERNAME/go-blog:latest .
          docker push $DOCKER_USERNAME/go-blog:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug docker-compose.yml presence
        run: |
          set -euxo pipefail
          echo "Listing contents of runner workspace root:"
          ls -la ./
          echo "Printing content of docker-compose.yml:"
          cat docker-compose.yml

      - name: Copy docker-compose.yml via SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          host_key_checking: false # Temporarily disable host key checking (SECURITY RISK - address properly for prod)
          source: "docker-compose.yml"
          target: "/home/${{ secrets.EC2_USERNAME }}/golang-simple-blog-app/"
          
      - name: Deploy to EC2 (Run Docker Compose)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          host_key_checking: false # Temporarily disabled - address for production
          script: |
            # Define target directory
            TARGET_DIR="/home/${{ secrets.EC2_USERNAME }}/golang-simple-blog-app"

            # Change to target directory
            cd $TARGET_DIR
            echo "Changed directory to $PWD"

            # Verify docker-compose.yml exists after SCP copy
            if [ ! -f docker-compose.yml ]; then
              echo "Error: docker-compose.yml not found in $PWD after SCP copy."
              # List contents for debugging if file not found
              echo "Contents of $PWD:"
              ls -la $PWD
              exit 1
            fi
            echo "docker-compose.yml found in $PWD."

            # Set DOCKER_HUB_USERNAME environment variable and run docker-compose commands
            echo "Setting DOCKER_HUB_USERNAME and running docker-compose..."
            export DOCKER_HUB_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
            docker-compose pull app
            docker-compose down
            docker-compose up -d 